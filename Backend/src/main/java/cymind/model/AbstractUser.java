package cymind.model;

import jakarta.persistence.*;
import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Pattern;
import lombok.Data;
import lombok.NoArgsConstructor;

@Entity
@Data
@Inheritance(strategy = InheritanceType.JOINED)
public class AbstractUser {
	
	// ========== Fields ==========
	
	/**
	 * Will be auto-generated by JPA library.
	 */
    @Id  // Field below will be a primary key for the table.
    @GeneratedValue(strategy = GenerationType.IDENTITY)
	private Long id;
	/**
	 * First name of the user.
	 */
	private String firstName;
	/**
	 * Last name of the user.
	 */
	private String lastName;
	/**
	 * How old is the person. Precise data birth is not necessary.
	 */
	private int age;

	/**
	 * Email annotation is part of the hibernate validator package that helps with validation of email input. 
	 * In which case, it currently is matching to the regexp that expresses any characters are allowed followed by an '@' except for '|' and '
	 * as they are potential SQL injection risk. Flag here is used to discern that input is not case-sensitive.
	 */
    @Email(regexp = "^[a-zA-Z0-9_!#$%&'*+/=?`{|}~^.-]+@[a-zA-Z0-9.-]+$",
            flags = Pattern.Flag.CASE_INSENSITIVE)
    @Column(unique = true)
    @NotBlank()
    private String email;

    // ========== Constructors ==========
    /**
     * We can not directly create an object of this class but the constructor is for descendant classes.
     * @param firstName
     * @param lastName
     * @param ageFullYears
     * @param email
     */
    public AbstractUser(String firstName, String lastName, int ageFullYears, String email) {
    	this.firstName = firstName;
    	this.lastName = lastName;
    	this.age = ageFullYears;
    	this.email = email;
    }

    /**
     * Default constuctor is required by JPA/Spring to recreate objects from the data base.
     */
    public AbstractUser() {}
}
