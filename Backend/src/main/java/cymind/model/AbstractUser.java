package cymind.model;

import jakarta.persistence.CascadeType;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Inheritance;
import jakarta.persistence.InheritanceType;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.OneToOne;

import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.Pattern;
import lombok.Getter;
import lombok.Setter;

@Entity
@Inheritance(strategy = InheritanceType.JOINED)
public abstract class AbstractUser {
	
	// ========== Fields ==========
	
	@Id  // Field below will be a primary key for the table.
	@GeneratedValue(strategy = GenerationType.AUTO)
	/**
	 * Will be auto-generated by JPA library.
	 */
	private Long id;
	/**
	 * First name of the user.
	 */
	private String firstName;
	/**
	 * Last name of the user.
	 */
	private String lastName;
	/**
	 * How old is the person. Precise data birth is not necessary.
	 */
	private int ageFullYears;
	/**
	 * Email annotation is part of the hibernate validator package that helps with validation of email input. 
	 * In which case, it currently is matching to the regexp that expresses any characters are allowed followed by an '@' except for '|' and '
	 * as they are potential SQL injection risk. Flag here is used to discern that input is not case-sensitive.
	 */
    @Email(regexp = "^[a-zA-Z0-9_!#$%&'*+/=?`{|}~^.-]+@[a-zA-Z0-9.-]+$",
            flags = Pattern.Flag.CASE_INSENSITIVE)
    private String emailId;

    
    // ========== Constructors ==========
    
    /**
     * We can not directly create an object of this class but the constructor is for descendant classes.
     * @param firstName
     * @param lastName
     * @param ageFullYears
     * @param email
     */
    public AbstractUser(String firstName, String lastName, Integer ageFullYears, String emailId) {
    	this.firstName = firstName;
    	this.lastName = lastName;
    	this.ageFullYears = ageFullYears;
    	this.emailId = emailId;
    }
    
    /**
     * Default constuctor is required by JPA/Spring to recreate objects from the data base.
     */
    public AbstractUser() {}
	
    
    // ========== Getters and Setters ==========
    
    public Long getId() {
        return id;
    }

    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }
    
    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    public Integer getAge() {
        return ageFullYears;
    }

    public void setAge(Integer age) {
        this.ageFullYears = age;
    }

    public String getEmail() {
        return emailId;
    }

    public void setEmail(String email) {
        this.emailId = email;
    }
}


































