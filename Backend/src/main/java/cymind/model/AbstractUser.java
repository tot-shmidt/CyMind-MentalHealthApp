package cymind.model;

import com.fasterxml.jackson.annotation.JsonIgnore;
import cymind.dto.user.AbstractUserDTO;
import cymind.enums.UserType;
import jakarta.persistence.*;
import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Pattern;
import lombok.Data;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

@Entity
@Data
@Inheritance(strategy = InheritanceType.JOINED)
public class AbstractUser implements UserDetails {
	
	// ========== Fields ==========
	
	/**
	 * Will be auto-generated by JPA library.
	 */
    @Id  // Field below will be a primary key for the table.
    @GeneratedValue(strategy = GenerationType.IDENTITY)
	private Long id;
	/**
	 * First name of the user.
	 */
    @NotBlank
	private String firstName;
	/**
	 * Last name of the user.
	 */
	private String lastName;
	/**
	 * How old is the person. Precise data birth is not necessary.
	 */
	private int age;

	/**
	 * Email annotation is part of the hibernate validator package that helps with validation of email input. 
	 * In which case, it currently is matching to the regexp that expresses any characters are allowed followed by an '@' except for '|' and '
	 * as they are potential SQL injection risk. Flag here is used to discern that input is not case-sensitive.
	 */
    @Email(regexp = "^[a-zA-Z0-9_!#$%&'*+/=?`{|}~^.-]+@[a-zA-Z0-9.-]+$",
            flags = Pattern.Flag.CASE_INSENSITIVE,
            message = "must be a valid email address")
    @Column(unique = true, nullable = false)
    @NotBlank()
    private String email;

    @JsonIgnore
    @NotBlank
    private String passwordHash;

    private UserType userType;

    // ========== Constructors ==========
    /**
     * We can not directly create an object of this class but the constructor is for descendant classes.
     * @param firstName
     * @param lastName
     * @param age
     * @param email
     * @param passwordHash
     */
    public AbstractUser(String firstName, String lastName, int age, String email, String passwordHash) {
    	this.firstName = firstName;
    	this.lastName = lastName;
    	this.age = age;
    	this.email = email;
        this.passwordHash = passwordHash;
    }

    public AbstractUser(String firstName, String lastName, int age, String email) {
        this.firstName = firstName;
        this.lastName = lastName;
        this.age = age;
        this.email = email;
        this.passwordHash = "";
    }

    /**
     * Default constuctor is required by JPA/Spring to recreate objects from the data base.
     */
    public AbstractUser() {}

    public void updateFromDTO(AbstractUserDTO dto) {
        this.email = dto.email();
        this.firstName = dto.firstName();
        this.lastName = dto.lastName();
        this.age = dto.age();
    }

    @Override
    public Collection<? extends GrantedAuthority> getAuthorities() {
        List<GrantedAuthority> authorities = new ArrayList<>();
        authorities.add(new SimpleGrantedAuthority("USER"));
        return authorities;
    }

    @Override
    public String getPassword() {
        return passwordHash;
    }

    @Override
    public String getUsername() {
        return email;
    }
}
